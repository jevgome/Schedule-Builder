"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var e_1, _a, e_2, _b;
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var DEFAULT_PREREQS = 'There are no prerequisites for this course.';
var DEFAULT_DESC = 'There is no description provided for this course.';
var start = Date.now();
// Open all files that start with 'courses' and read them into memory.
var courseFiles = fs_1.default.readdirSync('.').filter(function (file) { return file.startsWith('courses') && !/courses-\d+.json/.test(file) && file.endsWith('.json'); });
if (!courseFiles.length) {
    console.warn('[!] Exited with status code 1, could not find any course mapping files.');
    process.exit(1);
}
if (courseFiles.length === 1) {
    console.warn('[!] Exited with status code 1, merging requires two or more files to function.');
    process.exit(1);
}
var latest = courseFiles.find(function (file) { return file === 'courses.json'; });
if (!latest)
    latest = 'courses-' + courseFiles.reduce(function (acc, file) {
        var _a = __read(file.split('-'), 2), _ = _a[0], num = _a[1];
        return Math.max(acc, parseInt(num));
    }, 0) + '.json';
var latestPayload = JSON.parse(fs_1.default.readFileSync("./" + latest, 'utf8'));
console.log("[*] Latest payload: " + latest);
console.log("[*] Located " + courseFiles.length + " mapping payloads:");
courseFiles.forEach(function (file) { return console.log("    - " + file); });
console.log('[*] Ready to perform merge..');
var courseObjects = [];
try {
    for (var courseFiles_1 = __values(courseFiles), courseFiles_1_1 = courseFiles_1.next(); !courseFiles_1_1.done; courseFiles_1_1 = courseFiles_1.next()) {
        var courseFile = courseFiles_1_1.value;
        var course = JSON.parse(fs_1.default.readFileSync("./" + courseFile, 'utf8'));
        console.log("[*] [Manifest] " + courseFile + " :: " + course.length + " entr" + (course.length === 1 ? 'y' : 'ies'));
        courseObjects = courseObjects.concat(course);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (courseFiles_1_1 && !courseFiles_1_1.done && (_a = courseFiles_1.return)) _a.call(courseFiles_1);
    }
    finally { if (e_1) throw e_1.error; }
}
var allCourses = latestPayload;
var patchAttributes = function (existing, target) {
    if (!existing.description || existing.description === DEFAULT_DESC
        && (target.description && target.description !== DEFAULT_DESC))
        existing.description = target.description;
    if (!existing.prerequisites || existing.prerequisites === DEFAULT_PREREQS
        && (target.prerequisites && target.prerequisites !== DEFAULT_PREREQS))
        existing.prerequisites = target.prerequisites;
    if (!existing.attributes && target.attributes)
        existing.attributes = target.attributes;
    if (existing.attributes && target.attributes) {
        if (!existing.attributes.lab && target.attributes.lab)
            existing.attributes.lab = target.attributes.lab;
        if (!existing.attributes.writing && target.attributes.writing)
            existing.attributes.writing = target.attributes.writing;
        if (!existing.attributes.quantitative && target.attributes.quantitative)
            existing.attributes.quantitative = target.attributes.quantitative;
        if (!existing.attributes.environmental && target.attributes.environmental)
            existing.attributes.environmental = target.attributes.environmental;
        if (!existing.attributes.contentAreas && target.attributes.contentAreas)
            existing.attributes.contentAreas = target.attributes.contentAreas;
    }
    if (!existing.credits && target.credits)
        existing.credits = target.credits;
    if (!existing.grading && target.grading)
        existing.grading = target.grading;
    return existing;
};
var _loop_1 = function (course) {
    var existing = allCourses.find(function (c) { return c.name === course.name
        && c.catalogName === course.catalogName
        && c.catalogNumber === course.catalogNumber; });
    if (!existing) {
        allCourses.push(course);
        console.log("[*] [New - " + allCourses.length + "] " + course.name + " :: " + course.catalogName);
        return "continue";
    }
    // Patch existing and replace it.
    var target = allCourses.indexOf(existing);
    var patched = patchAttributes(existing, course);
    if (patched === existing)
        return "continue";
    console.log("[*] [Patch] " + existing.name + " was patched.");
    allCourses[target] = patched;
};
try {
    // Iterate through all courses and add them to the master list if they do not exist yet.
    for (var courseObjects_1 = __values(courseObjects), courseObjects_1_1 = courseObjects_1.next(); !courseObjects_1_1.done; courseObjects_1_1 = courseObjects_1.next()) {
        var course = courseObjects_1_1.value;
        _loop_1(course);
    }
}
catch (e_2_1) { e_2 = { error: e_2_1 }; }
finally {
    try {
        if (courseObjects_1_1 && !courseObjects_1_1.done && (_b = courseObjects_1.return)) _b.call(courseObjects_1);
    }
    finally { if (e_2) throw e_2.error; }
}
console.log("[*] Latest: " + latestPayload.length + ", all: " + allCourses.length + ", delta: " + (allCourses.length - latestPayload.length));
var timestamp = Date.now();
if (latest === 'courses.json') {
    fs_1.default.renameSync(latest, "courses-" + timestamp + ".json");
    console.log("[*] Saved intermediate payload to courses-" + timestamp + ".json");
}
allCourses = allCourses
    .filter(function (a) { return a.name; })
    .sort(function (a, b) { return a.name.localeCompare(b.name); });
// Write the merged object to a file.
fs_1.default.writeFileSync('./courses.json', JSON.stringify(allCourses, null, 4));
console.log('[*] Merged payload written to disk.');
console.log("[*] Finished in " + (Date.now() - start) + "ms.");
//# sourceMappingURL=merge.js.map