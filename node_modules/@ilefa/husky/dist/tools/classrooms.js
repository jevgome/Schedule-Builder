"use strict";
/*
 * Copyright (c) 2021 ILEFA Labs
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnumKeyByEnumValue = void 0;
var fs_1 = __importDefault(require("fs"));
var axios_1 = __importDefault(require("axios"));
var cheerio_1 = __importDefault(require("cheerio"));
var progress_1 = __importDefault(require("progress"));
var src_1 = require("../src");
var remoteLinks = [
    'https://classrooms.uconn.edu/classroom',
    'https://classrooms.hartford.uconn.edu/classroom',
    'https://classrooms.stamford.uconn.edu/classroom',
    'https://classrooms.waterbury.uconn.edu/classroom',
    'https://academicservices.averypoint.uconn.edu/classroom/'
];
var remoteLinkNames = [
    'storrs',
    'hartford',
    'stamford',
    'waterbury',
    'avery_point'
];
var CampusSorting;
(function (CampusSorting) {
    CampusSorting[CampusSorting["STORRS"] = 0] = "STORRS";
    CampusSorting[CampusSorting["HARTFORD"] = 1] = "HARTFORD";
    CampusSorting[CampusSorting["STAMFORD"] = 2] = "STAMFORD";
    CampusSorting[CampusSorting["WATERBURY"] = 3] = "WATERBURY";
    CampusSorting[CampusSorting["AVERY_POINT"] = 4] = "AVERY_POINT";
})(CampusSorting || (CampusSorting = {}));
var realRoomCodes = {
    'CHM': 'CHEM',
    'WIDM': 'STRSWW',
    'WOOD': 'WH',
    'WATERBURY': 'WTBY',
    'WREC': 'RECTORY',
};
var generateClassroomMappings = function () { return __awaiter(void 0, void 0, void 0, function () {
    var date, start, failed, all, rooms;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log('[*] Preparing to generate mappings..');
                if (fs_1.default.existsSync('./classrooms.json')) {
                    date = Date.now();
                    console.log("[*] Existing mappings saved to [courses-" + date + ".json]");
                    fs_1.default.copyFileSync('./classrooms.json', "./classrooms-" + date + ".json");
                }
                start = Date.now();
                failed = [];
                return [4 /*yield*/, Promise.all(remoteLinks.map(function (link, i) { return __awaiter(void 0, void 0, void 0, function () {
                        var campus, $, links, bar;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    campus = remoteLinkNames[i];
                                    return [4 /*yield*/, axios_1.default
                                            .get(link)
                                            .then(function (res) { return res.data; })
                                            .then(function (res) { return cheerio_1.default.load(res); })
                                            .catch(function (_) { return null; })];
                                case 1:
                                    $ = _a.sent();
                                    if (!$)
                                        return [2 /*return*/, console.error('Failed to retrieve data from the web.')];
                                    links = [];
                                    $('.classroom-item')
                                        .each(function (i) { return links
                                        .push($("div.col-sm-3:nth-child(" + (i + 1) + ") > div:nth-child(2) > div:nth-child(1) > a:nth-child(1)")
                                        .attr('href')); });
                                    bar = new progress_1.default(':room [:bar] :rate/rps :etas (:current/:total) (:percent done)', {
                                        complete: '=',
                                        incomplete: ' ',
                                        width: 20,
                                        total: links.length
                                    });
                                    return [4 /*yield*/, Promise.all(links.map(function (link, i) { return __awaiter(void 0, void 0, void 0, function () {
                                            var res;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, lookup(link, failed, campus)];
                                                    case 1:
                                                        res = _a.sent();
                                                        bar.tick({
                                                            room: ((i + 1) >= links.length)
                                                                ? 'done'
                                                                : links[i]
                                                        });
                                                        return [2 /*return*/, res];
                                                }
                                            });
                                        }); }))];
                                case 2: return [2 /*return*/, _a.sent()];
                            }
                        });
                    }); }))];
            case 1:
                all = _a.sent();
                rooms = []
                    .concat
                    .apply([], all)
                    .sort(function (a, b) { return a.building.code.localeCompare(b.building.code); })
                    .sort(function (a, b) { return CampusSorting[a.building.campus] - CampusSorting[b.building.campus]; });
                fs_1.default.writeFileSync('./classrooms.json', JSON.stringify(rooms, null, 3));
                if (failed.length > 0) {
                    console.log("\n[*] Failed to generate " + failed.length + " mappings:");
                    failed.forEach(function (room) { return console.log(" - " + room); });
                }
                console.log("[*] Finished generating mappings for " + rooms.length + " classrooms in " + getLatestTimeValue(Date.now() - start) + ".");
                return [2 /*return*/];
        }
    });
}); };
var lookup = function (link, failed, campus) { return __awaiter(void 0, void 0, void 0, function () {
    var $, name, building, buildingCode, roomNumber, techType, techDescription, seatingType, boardType, covidCapacity, regularCapacity, byodTesting, conference, lectureType, liveStream, threeSixty, airConditioning;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, axios_1.default
                    .get(link)
                    .then(function (res) { return res.data; })
                    .then(function (res) { return cheerio_1.default.load(res); })
                    .catch(function (_) { return null; })];
            case 1:
                $ = _a.sent();
                if (!$) {
                    failed.push(link);
                    return [2 /*return*/, null];
                }
                name = $('.classroom-info-title').text();
                building = $('.classroom-info-building').text();
                buildingCode = $('.classroom-info-buildingcode > span').text();
                roomNumber = $('.classroom-info-roomnumber > span').text();
                techType = $('.classroom-info-techtype > span').text();
                techDescription = $('.classroom-info-tech > span').text();
                seatingType = $('.classroom-info-seatingtype > span').text();
                boardType = $('.classroom-info-boardtype > span').text();
                covidCapacity = parseInt($('.classroom-info-capacity:nth-of-type(2n) > span').text());
                regularCapacity = parseInt($('.classroom-info-capacity:nth-of-type(2n + 1) > span').text());
                byodTesting = $('.classroom-info-byod > span').text();
                conference = $('.classroom-info-video > span').text();
                lectureType = $('.classroom-info-lecture > span.lecture_type').text();
                liveStream = $('span.live-stream > a').attr('href');
                threeSixty = $('.classroom-info-360viewurl > span > a').attr('href') || $('.classroom-photo').attr('src');
                airConditioning = $('.classroom-info-aircondition > span').text();
                return [2 /*return*/, {
                        name: (realRoomCodes[name.split(' ')[0].toUpperCase()] || name.split(' ')[0]).toUpperCase() + name.split(' ')[1].split('/')[0],
                        building: {
                            name: building,
                            code: !buildingCode
                                ? name.split(' ')[0]
                                : realRoomCodes[buildingCode]
                                    || buildingCode,
                            campus: campus.toUpperCase(),
                        },
                        room: roomNumber,
                        techType: getEnumKeyByEnumValue(src_1.TechType, techType),
                        techDescription: techDescription || undefined,
                        seatingType: getEnumKeyByEnumValue(src_1.SeatingType, seatingType),
                        boardType: getEnumKeyByEnumValue(src_1.BoardType, boardType),
                        capacity: {
                            covid: covidCapacity,
                            full: regularCapacity
                        },
                        byodTesting: byodTesting ? byodTesting.toLowerCase() === 'yes' : false,
                        airConditioned: airConditioning ? airConditioning.toLowerCase() === 'yes' : false,
                        videoConference: src_1.ClassroomConferenceType.fromString(conference),
                        lectureCapture: (getEnumKeyByEnumValue(src_1.LectureCaptureType, lectureType) || 'NONE'),
                        liveStreamUrl: liveStream,
                        threeSixtyView: threeSixty,
                    }];
        }
    });
}); };
var getLatestTimeValue = function (time) {
    var sec = Math.trunc(time / 1000) % 60;
    var min = Math.trunc(time / 60000 % 60);
    var hrs = Math.trunc(time / 3600000 % 24);
    var days = Math.trunc(time / 86400000 % 30.4368);
    var mon = Math.trunc(time / 2.6297424E9 % 12.0);
    var yrs = Math.trunc(time / 3.15569088E10);
    var y = yrs + "y";
    var mo = mon + "mo";
    var d = days + "d";
    var h = hrs + "h";
    var m = min + "m";
    var s = sec + "s";
    var result = '';
    if (yrs !== 0)
        result += y + ", ";
    if (mon !== 0)
        result += mo + ", ";
    if (days !== 0)
        result += d + ", ";
    if (hrs !== 0)
        result += h + ", ";
    if (min !== 0)
        result += m + ", ";
    result = result.substring(0, Math.max(0, result.length - 2));
    if ((yrs !== 0 || mon !== 0 || days !== 0 || min !== 0 || hrs !== 0) && sec !== 0) {
        result += ', ' + s;
    }
    if (yrs === 0 && mon === 0 && days === 0 && hrs === 0 && min === 0) {
        result += s;
    }
    return result.trim();
};
function getEnumKeyByEnumValue(target, value) {
    var keys = Object.keys(target).filter(function (x) { return target[x] == value; });
    return keys.length > 0 ? keys[0] : undefined;
}
exports.getEnumKeyByEnumValue = getEnumKeyByEnumValue;
generateClassroomMappings();
//# sourceMappingURL=classrooms.js.map