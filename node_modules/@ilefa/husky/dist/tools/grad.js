"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var axios_1 = __importDefault(require("axios"));
var cheerio_1 = __importDefault(require("cheerio"));
var progress_1 = __importDefault(require("progress"));
var src_1 = require("../src");
var PREFIXES = [
    "ACCT",
    "ADMN",
    "AMES",
    "AFRI",
    "AFRA",
    "ARE",
    "AGNR",
    "AH",
    "AMST",
    "ANSC",
    "ANTH",
    "ALDS",
    "ART",
    "ARTH",
    "BASC",
    "BME",
    "BIST",
    "BADM",
    "BLAW",
    "CHEG",
    "CHEM",
    "CE",
    "CAMS",
    "CLTR",
    "COGS",
    "COMM",
    "CORG",
    "CLCS",
    "CSE",
    "CHIP",
    "DENT",
    "DMD",
    "DSEL",
    "DRAM",
    "ERTH",
    "EEB",
    "ECON",
    "EGEN",
    "EDCI",
    "EDLR",
    "EPSY",
    "ECE",
    "ENGR",
    "ENGL",
    "ENVE",
    "ES",
    "EMBA",
    "FED",
    "FNCE",
    "FREN",
    "GEOG",
    "GERM",
    "GRAD",
    "HCMI",
    "HEJS",
    "HIST",
    "HBEL",
    "HDFS",
    "HRTS",
    "IS",
    "INDS",
    "IGFP",
    "ISKM",
    "ISG",
    "IMS",
    "IMED",
    "INTS",
    "ILCS",
    "KINS",
    "LLAS",
    "LING",
    "LCL",
    "MENT",
    "MFGE",
    "MARN",
    "MKTG",
    "MSE",
    "MATH",
    "ME",
    "MLSC",
    "MEDS",
    "MCB",
    "MUSI",
    "NRE",
    "NURS",
    "NUSC",
    "OPIM",
    "PATH",
    "PHAR",
    "PHIL",
    "PT",
    "PHYS",
    "PNB",
    "PLSC",
    "POPR",
    "POLS",
    "POLY",
    "PSYC",
    "PUBH",
    "PP",
    "RSCH",
    "ROML",
    "SSW",
    "SWEL",
    "SOCI",
    "SPAN",
    "SPTP",
    "SLHS",
    "STAT",
    "SE",
    "TRST",
    "WGSS"
];
var ContentArea;
(function (ContentArea) {
    ContentArea["CA1"] = "CA1";
    ContentArea["CA2"] = "CA2";
    ContentArea["CA3"] = "CA3";
    ContentArea["CA4"] = "CA4";
    ContentArea["CA4INT"] = "CA4INT";
})(ContentArea || (ContentArea = {}));
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var courses, results, courseNames, catalogNames, category, _loop_1, category_1, category_1_1, _a, prefix, $, bar, courseNames_1, courseNames_1_1, courseName, payload, course, e_1_1;
    var e_2, _b, e_1, _c;
    var _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                courses = [];
                results = PREFIXES.map(function (prefix) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, axios_1.default
                                .get("https://gradcatalog.uconn.edu/course-descriptions/course/" + prefix + "/")
                                .then(function (res) { return res.data; })
                                .then(function (res) { return ({ prefix: prefix, html: cheerio_1.default.load(res) }); })
                                .catch(function (_) { return null; })];
                    });
                }); });
                courseNames = [];
                catalogNames = [];
                return [4 /*yield*/, Promise.all(results)];
            case 1:
                category = _f.sent();
                _loop_1 = function (prefix, $) {
                    if (!$)
                        return "continue";
                    $('.single-course > h3')
                        .each(function (i) {
                        courseNames.push(prefix +
                            $(".single-course > h3:nth-of-type(" + (i + 1) + ")")
                                .text()
                                .split('.')[0]);
                        catalogNames.push($('.single-course > h3:nth-of-type(' + (i + 1) + ')')
                            .text()
                            .split('.')[1]
                            .trim());
                    });
                };
                try {
                    for (category_1 = __values(category), category_1_1 = category_1.next(); !category_1_1.done; category_1_1 = category_1.next()) {
                        _a = category_1_1.value, prefix = _a.prefix, $ = _a.html;
                        _loop_1(prefix, $);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (category_1_1 && !category_1_1.done && (_b = category_1.return)) _b.call(category_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                console.log("[*] Ready to generate mappings for " + courseNames.length.toLocaleString() + " courses.");
                bar = new progress_1.default(':course [:bar] :rate/rps :etas (:current/:total) (:percent done)', {
                    complete: '=',
                    incomplete: ' ',
                    width: 20,
                    total: courseNames.length
                });
                _f.label = 2;
            case 2:
                _f.trys.push([2, 7, 8, 9]);
                courseNames_1 = __values(courseNames), courseNames_1_1 = courseNames_1.next();
                _f.label = 3;
            case 3:
                if (!!courseNames_1_1.done) return [3 /*break*/, 6];
                courseName = courseNames_1_1.value;
                return [4 /*yield*/, src_1.searchCourse(courseName, 'any', false, [])];
            case 4:
                payload = _f.sent();
                if (!payload) {
                    console.log("[!] Could not find course " + courseName);
                    return [3 /*break*/, 5];
                }
                course = {
                    name: courseName,
                    catalogName: catalogNames[courseNames.indexOf(courseName)],
                    catalogNumber: courseName.split(/(\d{3,4})/)[1],
                    prerequisites: (_d = payload.prereqs) !== null && _d !== void 0 ? _d : 'There are no prerequisites for this course.',
                    attributes: {
                        lab: false,
                        writing: false,
                        quantitative: false,
                        environmental: false,
                        contentAreas: [],
                        graduate: true
                    },
                    credits: parseInt(payload.credits),
                    grading: payload.grading,
                    description: (_e = payload.description) !== null && _e !== void 0 ? _e : 'There is no description for this course.'
                };
                courses.push(course);
                bar.tick({ course: courseName });
                _f.label = 5;
            case 5:
                courseNames_1_1 = courseNames_1.next();
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_1_1 = _f.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (courseNames_1_1 && !courseNames_1_1.done && (_c = courseNames_1.return)) _c.call(courseNames_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 9:
                fs_1.default.writeFileSync('courses-grad.json', JSON.stringify(courses, null, 3));
                console.log("[*] Done generating mappings for " + courseNames.length.toLocaleString() + " courses.");
                return [2 /*return*/];
        }
    });
}); })();
//# sourceMappingURL=grad.js.map