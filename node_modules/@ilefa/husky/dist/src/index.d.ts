import { CampusType, Classroom, CourseMapping, CoursePayload, EnrollmentPayload, RateMyProfessorResponse, RmpReport, SearchParts, SectionPayload, UConnService, UConnServiceReport } from './util';
export * from './util';
export declare const COURSE_IDENTIFIER: RegExp;
export declare const SECTION_IDENTIFIER: RegExp;
/**
 * Attempts to retrieve data regarding
 * a specific UConn course, and returns
 * all sections, metadata, and other related
 * data about it.
 *
 * Using ``useMappings`` as true will only return
 * the base course information, and will always
 * omit professors and sections from the result.
 *
 * Do note that if the mapping does not exist,
 * it will fallback to querying the catalog.
 *
 * Also do note that {@link SearchParts.PROFESSORS} is contingent
 * upon {@link SearchParts.SECTIONS} being included, so if it is
 * not, you will not get professors data.
 *
 * @param identifier a valid course identifier
 * @param campus a valid campus type
 * @param useMappings whether or not to use offline mappings first, and if not found then query catalog
 * @param include overrides what parts are included in the CoursePayload, omit parameter to include all parts
 */
export declare const searchCourse: (identifier: string, campus?: CampusType, useMappings?: boolean, include?: SearchParts[]) => Promise<CoursePayload>;
/**
 * Attempts to retrieve information about
 * the given section of a course in the form
 * of a SectionData object.
 *
 * @param identifier the course identifier
 * @param section the course section to query
 */
export declare const searchBySection: (identifier: string, section: string) => Promise<SectionPayload>;
/**
 * Returns all Course Mappings from the `courses.json`
 * file in the root of this project.
 */
export declare const getMappings: () => CourseMapping[];
/**
 * Returns a single CourseMapping object by some attribute.
 *
 * @param key the key to search on
 * @param val the value to search for
 */
export declare const getMappingByAttribute: <K extends keyof CourseMapping>(key: K, val: CourseMapping[K]) => CourseMapping;
/**
 * Returns all CourseMappings that match a some attribute.
 *
 * @param key the key to search on
 * @param filter the filtering function to match results
 */
export declare const getMappingMatches: <K extends keyof CourseMapping>(key: K, filter: (val: CourseMapping[K]) => boolean) => CourseMapping[];
/**
 * Returns all Classroom Mappings from the `classrooms.json`
 * file in the root of this project.
 */
export declare const getClassrooms: () => Classroom[];
/**
 * Returns all classrooms that match a specific building.
 *
 * @param key the building attribute key to search on
 * @param val the value to search for
 */
export declare const getClassroomsForBuilding: <K extends "name" | "code" | "campus">(key: K, val: {
    name: string;
    code: string;
    campus: string;
}[K]) => Classroom[];
/**
 * Returns a single Classroom object by some attribute.
 *
 * @param key the key to search on
 * @param val the value to search for
 */
export declare const getClassroomByAttribute: <K extends keyof Classroom>(key: K, val: Classroom[K]) => Classroom;
/**
 * Returns all Classroom objects matching the filtering criteria.
 *
 * @param key the key to search on
 * @param filter the filtering function to match results
 */
export declare const getClassroomMatches: <K extends keyof Classroom>(key: K, filter: (val: Classroom[K]) => boolean) => Classroom[];
/**
 * Attempts to locate entries on RMP
 * for a specified professor.
 *
 * @param instructor the instructor to search for
 * @author Noah Struck <https://github.com/Struck713/eagle>
 */
export declare const searchRMP: (instructor: string) => Promise<RateMyProfessorResponse>;
/**
 * Attempts to create a report based
 * off of RMP data available for a
 * specified professor's RMP ID.
 *
 * @param id the instructor's RMP id
 * @author Noah Struck <https://github.com/Struck713/eagle>
 */
export declare const getRmpReport: (id: string) => Promise<RmpReport>;
/**
 * Attempts to query enrollment data from the
 * course catalog enrollment API.
 *
 * Returns an unformatted string of #/# which
 * represents the current available seats and
 * capacity of the requested class.
 *
 * @param term the term id of the current term
 * @param classNumber the class number for the requested class
 * @param section the requested section
 */
export declare const getRawEnrollment: (term: string, classNumber: string, section: string) => Promise<EnrollmentPayload>;
/**
 * Attempts to lookup service statuses from
 * the [UConn IT Status page](https://itstatus.uconn.edu)
 * and return them as UConnServiceReport objects.
 *
 * @param services [optional] the services to lookup
 */
export declare const getServiceStatus: (...include: UConnService[]) => Promise<UConnServiceReport[]>;
