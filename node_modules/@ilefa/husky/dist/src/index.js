"use strict";
/*
 * Copyright (c) 2024 ILEFA Labs
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServiceStatus = exports.getRawEnrollment = exports.getRmpReport = exports.searchRMP = exports.getClassroomMatches = exports.getClassroomByAttribute = exports.getClassroomsForBuilding = exports.getClassrooms = exports.getMappingMatches = exports.getMappingByAttribute = exports.getMappings = exports.searchBySection = exports.searchCourse = exports.SECTION_IDENTIFIER = exports.COURSE_IDENTIFIER = void 0;
var qs_1 = __importDefault(require("qs"));
var axios_1 = __importDefault(require("axios"));
var moment_1 = __importDefault(require("moment"));
var cheerio_1 = __importDefault(require("cheerio"));
var cheerio_tableparser_1 = __importDefault(require("cheerio-tableparser"));
var classrooms_json_1 = __importDefault(require("../classrooms.json"));
var courses_json_1 = __importDefault(require("../courses.json"));
var html_entities_1 = require("html-entities");
var util_1 = require("./util");
__exportStar(require("./util"), exports);
exports.COURSE_IDENTIFIER = /^[a-zA-Z]{2,4}\d{3,4}(Q|E|W)*$/;
exports.SECTION_IDENTIFIER = /^(H|Z|W|N)*\d{2,3}(L|D|X)*$/;
var DEFAULT_PREREQS = 'There are no prerequisites for this course.';
var DEFAULT_DESC = 'There is no description provided for this course.';
var DEFAULT_SEARCH_PARTS = [util_1.SearchParts.SECTIONS, util_1.SearchParts.PROFESSORS];
/**
 * Attempts to retrieve data regarding
 * a specific UConn course, and returns
 * all sections, metadata, and other related
 * data about it.
 *
 * Using ``useMappings`` as true will only return
 * the base course information, and will always
 * omit professors and sections from the result.
 *
 * Do note that if the mapping does not exist,
 * it will fallback to querying the catalog.
 *
 * Also do note that {@link SearchParts.PROFESSORS} is contingent
 * upon {@link SearchParts.SECTIONS} being included, so if it is
 * not, you will not get professors data.
 *
 * @param identifier a valid course identifier
 * @param campus a valid campus type
 * @param useMappings whether or not to use offline mappings first, and if not found then query catalog
 * @param include overrides what parts are included in the CoursePayload, omit parameter to include all parts
 */
var searchCourse = function (identifier, campus, useMappings, include) {
    if (campus === void 0) { campus = 'any'; }
    if (useMappings === void 0) { useMappings = false; }
    if (include === void 0) { include = DEFAULT_SEARCH_PARTS; }
    return __awaiter(void 0, void 0, void 0, function () {
        var prefix, number, mapping, marker, target, res, $, name, grading, credits, prereqs, parts, lastDataRaw, lastDataMarker, description, sections, data, grad, sectionCount, _loop_1, i, professors, sections_1, sections_1_1, section, profs, _loop_2, profs_1, profs_1_1, prof, e_1_1, e_2_1;
        var e_2, _a, e_1, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!exports.COURSE_IDENTIFIER.test(identifier))
                        return [2 /*return*/, null];
                    prefix = identifier.split(/[0-9]/)[0].toUpperCase();
                    number = identifier.split(/[a-zA-Z]{2,4}/)[1];
                    if (!useMappings) return [3 /*break*/, 3];
                    mapping = courses_json_1.default.find(function (ent) { return ent.name === identifier; });
                    if (!!mapping) return [3 /*break*/, 2];
                    return [4 /*yield*/, exports.searchCourse(identifier, campus, false, [])];
                case 1: return [2 /*return*/, _c.sent()];
                case 2:
                    marker = moment_1.default().isBefore(new Date().setHours(6))
                        ? moment_1.default(new Date().setHours(-6))
                        : moment_1.default(new Date().setHours(0));
                    return [2 /*return*/, {
                            name: mapping.name,
                            grading: mapping.grading,
                            credits: mapping.credits.toString(),
                            prereqs: mapping.prerequisites,
                            lastDataMarker: marker.toDate(),
                            description: mapping.description,
                            sections: [],
                            professors: []
                        }];
                case 3:
                    target = util_1.getCatalogUrl(prefix, number);
                    return [4 /*yield*/, axios_1.default
                            .get(target)
                            .then(function (res) { return res.data; })
                            .catch(function (_) { return null; })];
                case 4:
                    res = _c.sent();
                    if (!res)
                        return [2 /*return*/, null];
                    $ = cheerio_1.default.load(res);
                    cheerio_tableparser_1.default($);
                    name = $('.single-course > h3:nth-child(2)')
                        .text()
                        .split(/\d{4}(?:Q|E|W)*\.\s/)[1];
                    grading = $('.grading-basis')
                        .text()
                        .trim()
                        .split('Grading Basis: ')[1] || 'Graded';
                    credits = $('.credits')
                        .text()
                        .trim()
                        .split(' ')[0] || 'Unknown Credits';
                    prereqs = $('.prerequisites').text() || DEFAULT_PREREQS;
                    if (prereqs && prereqs !== DEFAULT_PREREQS) {
                        parts = prereqs
                            .trim()
                            .split(/Prerequisite(?:s){0,1}\:\s/);
                        prereqs = parts.length === 1 ? parts[0] : parts[1];
                        if (prereqs.includes('None.'))
                            prereqs = DEFAULT_PREREQS;
                        if (prereqs.includes('Recommended Preparation'))
                            prereqs = prereqs.split('Recommended Preparation')[0].trim();
                    }
                    lastDataRaw = $('.last-refresh').text() || moment_1.default().format('DD-MMM-YY h.mm.ss.[123456] a').toUpperCase();
                    if (lastDataRaw.includes('.'))
                        lastDataRaw = replaceAll(lastDataRaw, '.', ':');
                    lastDataMarker = new Date(lastDataRaw.split(/:\d{6}/).join(''));
                    description = $('.description').text() || DEFAULT_DESC;
                    if (!include.includes(util_1.SearchParts.SECTIONS))
                        return [2 /*return*/, {
                                name: name, grading: grading, credits: credits,
                                prereqs: prereqs, lastDataMarker: lastDataMarker,
                                description: description,
                                sections: [],
                                professors: []
                            }];
                    sections = [];
                    data = $('.tablesorter').parsetable();
                    if (!data[0])
                        return [2 /*return*/, {
                                name: name, grading: grading, credits: credits,
                                prereqs: prereqs, lastDataMarker: lastDataMarker,
                                description: description,
                                sections: [],
                                professors: []
                            }];
                    grad = target.includes('gradcatalog');
                    sectionCount = data[0].length - 1;
                    _loop_1 = function (i) {
                        var internalData = cheerio_1.default.load(data[0][i].trim());
                        var term = data[1][i];
                        var campus_1 = html_entities_1.decode(data[grad ? 3 : 2][i]);
                        var mode = html_entities_1.decode(data[grad ? 4 : 3][i]);
                        var instructor = data[grad ? 5 : 4][i]
                            .replace(/\&nbsp;/g, ' ')
                            .replace(/<br\s*\/*>/g, ' | ')
                            .split(' | ')
                            .map(function (ent) { return ent
                            .split(', ')
                            .reverse()
                            .join(' '); })
                            .join(' & ');
                        var section = data[grad ? 6 : 5][i];
                        var session = data[grad ? 7 : 6][i].split('</a>')[0].split('>')[1];
                        var schedule = data[grad ? 8 : 7][i];
                        schedule = schedule.substring(0, schedule.length - 4);
                        var location = data[grad ? 10 : 8][i];
                        var locations = [];
                        if (location === null || location === void 0 ? void 0 : location.includes('classrooms.uconn.edu')) {
                            location = cheerio_1.default.load(location);
                            if (!location.html().includes('<br>')) {
                                var locationPayload = { name: location('a').text(), url: location('a').attr('href') };
                                locations.push(locationPayload);
                            }
                            else {
                                location('a').each(function (_, el) {
                                    var locationPayload = { name: $(el).text(), url: $(el).attr('href') };
                                    locations.push(locationPayload);
                                });
                            }
                        }
                        else {
                            var locationPayload = { name: location };
                            locations.push(locationPayload);
                        }
                        var enrollment = data[9][i];
                        var enrollmentPayload = {};
                        var spaces = enrollment.split('<')[0];
                        var current = spaces.split('/')[0];
                        var seats = spaces.split('/')[1];
                        enrollmentPayload.max = seats;
                        enrollmentPayload.current = current;
                        enrollmentPayload.full = current >= seats;
                        enrollmentPayload.waitlist = enrollment.includes('Waitlist Spaces:')
                            ? enrollment.split('Waitlist Spaces: ')[1]
                            : null;
                        var notes = data[grad ? 13 : 10][i];
                        var virtual = {
                            internal: {
                                termCode: internalData('span.term-code').text(),
                                classNumber: internalData('span.class-number').text(),
                                classSection: internalData('span.class-section').text(),
                                sessionCode: internalData('span.session-code').text(),
                            },
                            term: term,
                            mode: mode,
                            campus: campus_1,
                            instructor: instructor,
                            section: section,
                            session: session,
                            schedule: schedule,
                            location: locations
                                .filter(function (ent, i) { return locations.findIndex(function (ent2) { return ent2.name === ent.name; }) === i; })
                                .filter(function (ent) { return ent.name; }),
                            enrollment: enrollmentPayload,
                            notes: notes
                        };
                        if (virtual.campus.toLowerCase() === 'off-campus')
                            return "continue";
                        sections.push(virtual);
                    };
                    for (i = 0; i < sectionCount + 1; i++) {
                        _loop_1(i);
                    }
                    if (campus !== 'any') {
                        sections = sections.filter(function (section) {
                            return section
                                .campus
                                .replace(' ', '_')
                                .toLowerCase() === campus.toLowerCase();
                        });
                        sectionCount = sections.length;
                    }
                    professors = [];
                    sections = sections.slice(1, sections.length);
                    if (!include.includes(util_1.SearchParts.PROFESSORS))
                        return [2 /*return*/, {
                                name: name, grading: grading, credits: credits,
                                prereqs: prereqs, lastDataMarker: lastDataMarker,
                                description: description, sections: sections,
                                professors: []
                            }];
                    _c.label = 5;
                case 5:
                    _c.trys.push([5, 16, 17, 18]);
                    sections_1 = __values(sections), sections_1_1 = sections_1.next();
                    _c.label = 6;
                case 6:
                    if (!!sections_1_1.done) return [3 /*break*/, 15];
                    section = sections_1_1.value;
                    profs = section.instructor.split(' & ');
                    _loop_2 = function (prof) {
                        var rmp, teaching;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    if (professors.some(function (p) { return p.name === prof; }))
                                        return [2 /*return*/, "continue"];
                                    return [4 /*yield*/, exports.searchRMP(prof)];
                                case 1:
                                    rmp = _d.sent();
                                    teaching = sections
                                        .filter(function (section) { return section.instructor.split(' & ').includes(prof); })
                                        .sort(function (a, b) { return a.section.localeCompare(b.section); });
                                    prof = html_entities_1.decode(replaceAll(prof, '<br>', ' '));
                                    if (!rmp) {
                                        professors.push({
                                            name: prof,
                                            sections: teaching,
                                            rmpIds: []
                                        });
                                        return [2 /*return*/, "continue"];
                                    }
                                    professors.push({
                                        name: prof,
                                        sections: teaching,
                                        rmpIds: rmp.rmpIds
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _c.label = 7;
                case 7:
                    _c.trys.push([7, 12, 13, 14]);
                    profs_1 = (e_1 = void 0, __values(profs)), profs_1_1 = profs_1.next();
                    _c.label = 8;
                case 8:
                    if (!!profs_1_1.done) return [3 /*break*/, 11];
                    prof = profs_1_1.value;
                    return [5 /*yield**/, _loop_2(prof)];
                case 9:
                    _c.sent();
                    _c.label = 10;
                case 10:
                    profs_1_1 = profs_1.next();
                    return [3 /*break*/, 8];
                case 11: return [3 /*break*/, 14];
                case 12:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 14];
                case 13:
                    try {
                        if (profs_1_1 && !profs_1_1.done && (_b = profs_1.return)) _b.call(profs_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 14:
                    sections_1_1 = sections_1.next();
                    return [3 /*break*/, 6];
                case 15: return [3 /*break*/, 18];
                case 16:
                    e_2_1 = _c.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 18];
                case 17:
                    try {
                        if (sections_1_1 && !sections_1_1.done && (_a = sections_1.return)) _a.call(sections_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 18:
                    professors = professors.filter(function (prof) { return !!prof.name.trim(); });
                    return [2 /*return*/, {
                            name: name, grading: grading, credits: credits,
                            prereqs: prereqs, lastDataMarker: lastDataMarker,
                            description: description, sections: sections,
                            professors: professors
                        }];
            }
        });
    });
};
exports.searchCourse = searchCourse;
/**
 * Attempts to retrieve information about
 * the given section of a course in the form
 * of a SectionData object.
 *
 * @param identifier the course identifier
 * @param section the course section to query
 */
var searchBySection = function (identifier, section) { return __awaiter(void 0, void 0, void 0, function () {
    var res, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exports.searchCourse(identifier, util_1.detectCampusBySection(section) || 'any')];
            case 1:
                res = _a.sent();
                if (!res)
                    return [2 /*return*/, null];
                data = res
                    .sections
                    .find(function (_a) {
                    var sec = _a.section;
                    return sec.toLowerCase() === section.toLowerCase();
                });
                if (!data)
                    return [2 /*return*/, null];
                return [2 /*return*/, {
                        name: res.name,
                        grading: res.grading,
                        credits: res.credits,
                        prereqs: res.prereqs,
                        lastDataMarker: res.lastDataMarker,
                        description: res.description,
                        section: data
                    }];
        }
    });
}); };
exports.searchBySection = searchBySection;
/**
 * Returns all Course Mappings from the `courses.json`
 * file in the root of this project.
 */
var getMappings = function () { return courses_json_1.default; };
exports.getMappings = getMappings;
/**
 * Returns a single CourseMapping object by some attribute.
 *
 * @param key the key to search on
 * @param val the value to search for
 */
var getMappingByAttribute = function (key, val) { return exports.getMappings().find(function (ent) { return ent[key] === val; }); };
exports.getMappingByAttribute = getMappingByAttribute;
/**
 * Returns all CourseMappings that match a some attribute.
 *
 * @param key the key to search on
 * @param filter the filtering function to match results
 */
var getMappingMatches = function (key, filter) { return exports.getMappings().filter(function (ent) { return filter(ent[key]); }); };
exports.getMappingMatches = getMappingMatches;
/**
 * Returns all Classroom Mappings from the `classrooms.json`
 * file in the root of this project.
 */
var getClassrooms = function () { return classrooms_json_1.default; };
exports.getClassrooms = getClassrooms;
/**
 * Returns all classrooms that match a specific building.
 *
 * @param key the building attribute key to search on
 * @param val the value to search for
 */
var getClassroomsForBuilding = function (key, val) { return exports.getClassrooms().filter(function (ent) { return ent.building[key] === val; }); };
exports.getClassroomsForBuilding = getClassroomsForBuilding;
/**
 * Returns a single Classroom object by some attribute.
 *
 * @param key the key to search on
 * @param val the value to search for
 */
var getClassroomByAttribute = function (key, val) { return exports.getClassrooms().find(function (ent) { return ent[key] === val; }); };
exports.getClassroomByAttribute = getClassroomByAttribute;
/**
 * Returns all Classroom objects matching the filtering criteria.
 *
 * @param key the key to search on
 * @param filter the filtering function to match results
 */
var getClassroomMatches = function (key, filter) { return exports.getClassrooms().filter(function (ent) { return filter(ent[key]); }); };
exports.getClassroomMatches = getClassroomMatches;
/**
 * Attempts to locate entries on RMP
 * for a specified professor.
 *
 * @param instructor the instructor to search for
 * @author Noah Struck <https://github.com/Struck713/eagle>
 */
var searchRMP = function (instructor) { return __awaiter(void 0, void 0, void 0, function () {
    var res, rmp;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, axios_1.default
                    .post("https://www.ratemyprofessors.com/graphql", {
                    query: "\n                    query AutocompleteSearchQuery {\n                        autocomplete(query: \"" + instructor + "\") {\n                            teachers {\n                                edges {\n                                    node {\n                                        id\n                                        school {\n                                            name\n                                            id\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                "
                }, {
                    headers: {
                        "Authorization": "Basic dGVzdDp0ZXN0"
                    }
                })
                    .then(function (res) { return res.data.data; })
                    .catch(function (_) { return null; })];
            case 1:
                res = _c.sent();
                if (!res || !((_b = (_a = res.autocomplete) === null || _a === void 0 ? void 0 : _a.teachers) === null || _b === void 0 ? void 0 : _b.edges))
                    return [2 /*return*/, {
                            name: instructor,
                            rmpIds: []
                        }];
                rmp = res
                    .autocomplete
                    .teachers
                    .edges
                    .filter(function (e) { return e.node.school.name.toLowerCase().includes('university of connecticut'); })
                    .map(function (e) { return e.node.id; });
                return [2 /*return*/, {
                        name: instructor,
                        rmpIds: rmp
                    }];
        }
    });
}); };
exports.searchRMP = searchRMP;
/**
 * Attempts to create a report based
 * off of RMP data available for a
 * specified professor's RMP ID.
 *
 * @param id the instructor's RMP id
 * @author Noah Struck <https://github.com/Struck713/eagle>
 */
var getRmpReport = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    var res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, axios_1.default
                    .post("https://www.ratemyprofessors.com/graphql", {
                    query: "\n                    query Node {\n                        node(id: \"" + id + "\") {\n                            ... on Teacher {\n                                avgRating\n                                avgDifficultyRounded\n                                wouldTakeAgainPercent\n                                numRatings\n                                teacherRatingTags {\n                                    tagName\n                                }\n                                courseCodes {\n                                    courseName\n                                    courseCount\n                                }\n                                firstName\n                                lastName\n                                ratings(first: 1000) {\n                                    edges {\n                                        node {\n                                            id\n                                            legacyId\n                                            class\n                                            comment\n                                            date\n                                            difficultyRating\n                                            helpfulRating\n                                            clarityRating\n                                            thumbsUpTotal\n                                            thumbsDownTotal\n                                            wouldTakeAgain\n                                            attendanceMandatory\n                                            grade\n                                            isForCredit\n                                            isForOnlineClass\n                                            ratingTags\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                "
                }, {
                    headers: {
                        "Authorization": "Basic dGVzdDp0ZXN0"
                    }
                })
                    .then(function (res) { return res.data; })
                    .catch(function (_) { return null; })];
            case 1:
                res = _a.sent();
                if (!res)
                    return [2 /*return*/, null];
                return [2 /*return*/, __assign({}, res.data.node)];
        }
    });
}); };
exports.getRmpReport = getRmpReport;
/**
 * Attempts to query enrollment data from the
 * course catalog enrollment API.
 *
 * Returns an unformatted string of #/# which
 * represents the current available seats and
 * capacity of the requested class.
 *
 * @param term the term id of the current term
 * @param classNumber the class number for the requested class
 * @param section the requested section
 */
var getRawEnrollment = function (term, classNumber, section) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, axios_1.default
                    .post('https://catalog.uconn.edu/wp-content/plugins/uc-courses/soap.php', qs_1.default.stringify({
                    action: 'get_latest_enrollment',
                    term: term,
                    classNbr: classNumber,
                    sessionCode: 1,
                    classSection: section
                }))
                    .then(function (res) { return res.data; })
                    .then(function (res) { return __awaiter(void 0, void 0, void 0, function () {
                    var seats, available, total, overfill;
                    return __generator(this, function (_a) {
                        if (!res.success)
                            throw new Error('Request failed');
                        seats = res.data.split('/');
                        available = parseInt(seats[0]);
                        total = parseInt(seats[1]);
                        overfill = available >= total;
                        return [2 /*return*/, {
                                course: {
                                    term: term,
                                    section: section,
                                    classNumber: classNumber
                                },
                                available: available,
                                total: total,
                                overfill: overfill,
                                percent: Number((available / total).toFixed(2))
                            }];
                    });
                }); })
                    .catch(function (_) { return null; })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.getRawEnrollment = getRawEnrollment;
/**
 * Attempts to lookup service statuses from
 * the [UConn IT Status page](https://itstatus.uconn.edu)
 * and return them as UConnServiceReport objects.
 *
 * @param services [optional] the services to lookup
 */
var getServiceStatus = function () {
    var include = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        include[_i] = arguments[_i];
    }
    return __awaiter(void 0, void 0, void 0, function () {
        var data, $, services;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios_1.default
                        .get('https://itstatus.uconn.edu')
                        .then(function (res) { return res.data; })
                        .catch(function (_) { return null; })];
                case 1:
                    data = _a.sent();
                    if (!data)
                        return [2 /*return*/, null];
                    if (include.includes(util_1.UConnService.UNKNOWN))
                        include = include.filter(function (srv) { return srv !== util_1.UConnService.UNKNOWN; });
                    $ = cheerio_1.default.load(data);
                    services = [];
                    $('.list-group > li').each(function (i) {
                        var selector = "li.list-group-item:nth-child(" + (i + 1) + ")";
                        var name = $(selector + " > p.box-1200").text();
                        var status = determineStatusFromHTML($(selector).html());
                        services.push({
                            service: util_1.UConnService[replaceAll(name.toUpperCase(), ' ', '_')] || util_1.UConnService.UNKNOWN,
                            status: status,
                            time: Date.now()
                        });
                    });
                    if (include && include.length)
                        services = services.filter(function (srv) { return include.includes(srv.service); });
                    if (services.some(function (srv) { return srv.service === util_1.UConnService.UNKNOWN; }))
                        services = services.filter(function (srv) { return srv.service !== util_1.UConnService.UNKNOWN; });
                    return [2 /*return*/, services];
            }
        });
    });
};
exports.getServiceStatus = getServiceStatus;
var determineStatusFromHTML = function (listItemSelector) {
    if (listItemSelector.includes('text-success'))
        return util_1.UConnServiceStatus.OPERATIONAL;
    if (listItemSelector.includes('text-info'))
        return util_1.UConnServiceStatus.REPORTING;
    if (listItemSelector.includes('text-warning'))
        return util_1.UConnServiceStatus.DEGRADED;
    if (listItemSelector.includes('text-danger'))
        return util_1.UConnServiceStatus.OUTAGE;
    return util_1.UConnServiceStatus.UNKNOWN;
};
var replaceAll = function (input, search, replace) {
    var copy = String(input);
    if (!copy.includes(search)) {
        return copy;
    }
    while (copy.includes(search)) {
        copy = copy.replace(search, replace);
    }
    return copy;
};
//# sourceMappingURL=index.js.map