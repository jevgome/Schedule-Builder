export declare type CompleteCoursePayload = {
    name: string;
    catalogName: string;
    catalogNumber: string;
    attributes: CourseAttributes;
    grading: string;
    credits: number;
    prerequisites: string;
    description: string;
    sections: SectionData[];
    professors: ProfessorData[];
};
export declare type CourseAttributes = {
    lab: boolean;
    writing: boolean;
    quantitative: boolean;
    environmental: boolean;
    contentAreas: ContentArea[];
};
export declare type CourseMapping = {
    name: string;
    catalogName: string;
    catalogNumber: string;
    prerequisites: string;
    attributes: CourseAttributes & {
        graduate: boolean;
    };
    credits: number;
    grading: string;
    description: string;
};
export declare enum ContentArea {
    CA1 = "CA1",
    CA2 = "CA2",
    CA3 = "CA3",
    CA4 = "CA4",
    CA4INT = "CA4INT"
}
export declare enum ContentAreaNames {
    CA1 = "Arts and Humanities",
    CA2 = "Social Sciences",
    CA3 = "Science and Technology",
    CA4 = "Diversity and Multiculturalism",
    CA4INT = "Diversity and Multiculturalism (International)"
}
export declare enum GradingTypeNames {
    GRADED = "Graded",
    SATISFACTORY_UNSATISFACTORY = "S/U",
    HONORS_CREDIT = "Honors",
    REGISTERED = "Registered"
}
export declare type CoursePayload = {
    name: string;
    grading: string;
    credits: string;
    prereqs: string;
    lastDataMarker: Date;
    description: string;
    sections: SectionData[];
    professors: ProfessorData[];
};
export declare type SectionPayload = {
    name: string;
    grading: string;
    credits: string;
    prereqs: string;
    lastDataMarker: Date;
    description: string;
    section: SectionData;
};
export declare type SectionData = {
    internal: {
        termCode: string;
        classNumber: string;
        classSection: string;
        sessionCode: string;
    };
    term: string;
    mode: string;
    campus: string;
    instructor: string;
    section: string;
    session: string;
    schedule: string;
    location: SectionLocationData[];
    enrollment: {
        max: number;
        current: number;
        waitlist?: number;
        full: boolean;
    };
    notes: string;
};
export declare type SectionLocationData = {
    name: string;
    url?: string;
};
export declare type ProfessorData = {
    name: string;
    sections: SectionData[];
    rmpIds: string[];
};
export declare type RateMyProfessorResponse = {
    name: string;
    rmpIds: string[];
};
export declare type RmpGraphQlEdge<T> = {
    edges: Array<{
        node: T;
    }>;
};
export declare type RmpReport = {
    avgRating: number;
    avgDifficultyRounded: number;
    wouldTakeAgainPercent: number;
    numRatings: number;
    teacherRatingTags: Array<{
        tagName: string;
    }>;
    courseCodes: Array<{
        courseName: string;
        courseCount: number;
    }>;
    firstName: string;
    lastName: string;
    ratings: RmpGraphQlEdge<RmpRating>;
};
export declare type RmpRating = {
    attendanceMandatory: string;
    clarityRating: number;
    class: string;
    comment: string;
    date: string;
    difficultyRating: number;
    grade: string;
    helpfulRating: number;
    id: string;
    isForCredit: boolean;
    isForOnlineClass: boolean;
    legacyId: number;
    ratingTags: string;
    thumbsDownTotal: number;
    thumbsUpTotal: number;
    wouldTakeAgain: number;
};
export declare enum UConnService {
    AURORA = "Aurora",
    EMAIL = "Email",
    HUSKYCT = "HuskyCT",
    KFS = "KFS",
    NETID = "NetID",
    NETWORK = "Network",
    STUDENT_ADMIN = "Student Admin",
    WEBEX = "Webex",
    UNKNOWN = "Unknown"
}
export declare enum UConnServiceStatus {
    OPERATIONAL = "Operational",
    REPORTING = "Reporting",
    DEGRADED = "Degraded",
    OUTAGE = "Outage",
    UNKNOWN = "Unknown"
}
export declare type UConnServiceReport = {
    service: UConnService;
    status: UConnServiceStatus;
    time: number;
};
export declare type Classroom = {
    name: string;
    building: {
        name: string;
        code: string;
        campus: string;
    };
    room: string;
    techType: string;
    techDescription?: string;
    seatingType: keyof typeof SeatingType;
    boardType: keyof typeof BoardType;
    capacity: {
        covid: number;
        full: number;
    };
    byodTesting?: boolean;
    airConditioned?: boolean;
    videoConference: ClassroomConferenceType;
    lectureCapture: keyof typeof LectureCaptureType;
    liveStreamUrl?: string;
    threeSixtyView: string;
};
export declare type ConferenceTypeCapabilities = {
    shareContent: boolean;
    instructorFacingCamera: boolean;
    studentFacingCamera: boolean;
    presentMediaFrontOfRoom: boolean;
    presentMediaBackOfRoom: boolean;
    instructorMicrophone: boolean;
    studentMicrophone: boolean;
    connectToWebex: boolean;
};
export declare class ClassroomConferenceType {
    private readonly key;
    readonly name: string;
    readonly attributes: ConferenceTypeCapabilities;
    static readonly FULL: ClassroomConferenceType;
    static readonly TEACH_FROM: ClassroomConferenceType;
    static readonly SEMINAR: ClassroomConferenceType;
    static readonly NONE: ClassroomConferenceType;
    private constructor();
    static fromString: (input: string) => any;
    toString: () => string;
}
export declare enum SeatingType {
    TABLES = "Tables",
    TABLES_AND_ARMCHAIRS = "Tables and Tablet Armchairs",
    TABLET_ARMCHAIRS = "Tablet Armchairs",
    FIXED_AUDITORIUM = "Fixed/Auditorium",
    FIXED_TABLES = "Fixed Seating Tables",
    FIXED_LEVELED_TABLES = "Fixed Tier Leveled Tables",
    LAB_TABLES = "Lab Tables and Chairs",
    ACTIVE = "Active Learning",
    UNKNOWN = "Unknown"
}
export declare enum TechType {
    FULL = "Full Hi-Tech",
    BASIC = "Basic Hi-Tech",
    UNKNOWN = "Unknown"
}
export declare enum BoardType {
    NONE = "None",
    WHITEBOARD = "Whiteboard",
    CHALKBOARD = "Chalkboard",
    UNKNOWN = "Unknown"
}
export declare enum LectureCaptureType {
    ALL = "All",
    NONE = "None",
    SELF_SERVICE_RECORDING = "Self Service Recording"
}
export declare type CampusType = 'any' | 'storrs' | 'hartford' | 'stamford' | 'waterbury' | 'avery_point';
export declare enum SearchParts {
    SECTIONS = 0,
    PROFESSORS = 1
}
export declare type EnrollmentPayload = {
    course: {
        term: string;
        classNumber: string;
        section: string;
    };
    available: number;
    total: number;
    overfill: boolean;
    percent: number;
};
